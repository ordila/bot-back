import {
  BadRequestException,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { PrismaService } from 'prisma/prisma.service';
import { startBot, stopBot } from 'src/lib/botManager/botManager';

@Injectable()
export class DiscordChatService {
  constructor(private prisma: PrismaService) {}

  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ Discord –∞–∫–∞—É–Ω—Ç –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
   */
  private async getDiscordAccountForUser(
    firebaseUid: string,
    discordAccountId: string,
  ) {
    const account = await this.prisma.discordAccount.findFirst({
      where: {
        id: discordAccountId,
        user: { firebaseUid }, // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –∑–≤'—è–∑–æ–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
      },
    });
    if (!account) {
      throw new NotFoundException(
        'Discord –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É',
      );
    }
    return account;
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —á–∞—Ç–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ Discord –∞–∫–∞—É–Ω—Ç–∞
  async getAllChats(firebaseUid: string, discordAccountId: string) {
    await this.getDiscordAccountForUser(firebaseUid, discordAccountId);
    return this.prisma.discordChat.findMany({
      where: { discordAccountId },
    });
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Ç –∑–∞ –π–æ–≥–æ id
  async getChatById(
    firebaseUid: string,
    discordAccountId: string,
    chatId: string,
  ) {
    await this.getDiscordAccountForUser(firebaseUid, discordAccountId);
    const chat = await this.prisma.discordChat.findFirst({
      where: {
        id: chatId,
        discordAccountId,
      },
    });
    if (!chat) {
      throw new NotFoundException('–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
    return chat;
  }

  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —á–∞—Ç
  async createChat(
    firebaseUid: string,
    discordAccountId: string,
    data: {
      name: string;
      discordChatId: string;
      min_interval: number;
      max_interval: number;
      prompt_system?: string;
      prompt_user?: string;
      max_tokens?: number;
      temperature?: number;
      gpt_model?: string;
      status: 'active' | 'stopped';
    },
  ) {
    await this.getDiscordAccountForUser(firebaseUid, discordAccountId);
    return this.prisma.discordChat.create({
      data: {
        discordAccountId,
        ...data,
      },
    });
  }

  // –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —á–∞—Ç
  async updateChat(
    firebaseUid: string,
    discordAccountId: string,
    chatId: string,
    data: {
      discordChatId?: string;
      min_interval?: number;
      max_interval?: number;
      prompt_system?: string;
      prompt_user?: string;
      max_tokens?: number;
      temperature?: number;
      gpt_model?: string;
      status?: 'active' | 'stopped';
    },
  ) {
    await this.getDiscordAccountForUser(firebaseUid, discordAccountId);
    const existingChat = await this.getChatById(
      firebaseUid,
      discordAccountId,
      chatId,
    );

    if (!existingChat) {
      throw new NotFoundException('–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    if (
      data.min_interval &&
      data.max_interval &&
      data.min_interval > data.max_interval
    ) {
      throw new BadRequestException(
        '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π',
      );
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Ç
    const updatedChat = await this.prisma.discordChat.update({
      where: { id: chatId },
      data,
    });

    // üõë **–ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º, —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∏—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏**
    const needsRestart = [
      'min_interval',
      'max_interval',
      'prompt_system',
      'prompt_user',
      'max_tokens',
      'temperature',
      'gpt_model',
    ].some((key) => key in data);

    if (needsRestart || (data.status && data.status !== existingChat.status)) {
      await stopBot(updatedChat.id);
    }

    // ‚úÖ **–ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —è–∫—â–æ —Å—Ç–∞—Ç—É—Å = 'active'**
    if (updatedChat.status === 'active') {
      await startBot(updatedChat.id);
    }

    return updatedChat;
  }

  // –í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç
  async deleteChat(
    firebaseUid: string,
    discordAccountId: string,
    chatId: string,
  ) {
    await this.getDiscordAccountForUser(firebaseUid, discordAccountId);
    await this.getChatById(firebaseUid, discordAccountId, chatId);
    return this.prisma.discordChat.delete({
      where: { id: chatId },
    });
  }
}
