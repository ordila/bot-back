import { Client, TextChannel } from 'discord.js-selfbot-v13';
import OpenAI from 'openai';
import { ChatStatus, PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface BotInstance {
  client: Client;
  chatId: string;
  intervalId: NodeJS.Timeout;
}

const activeBots: Map<string, BotInstance> = new Map();

/**
 * –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î –º–æ–¥–µ–ª—å system prompt.
 */
function modelSupportsSystemPrompt(model: string): boolean {
  const modelsWithSystemPrompt = [
    'gpt-4.5-preview',
    'gpt-4.5-preview-2025-02-27',
    'gpt-4o-mini-realtime-preview-2024-12-17',
    'gpt-4o-mini-realtime-preview',
    'gpt-4-turbo',
    'gpt-4o-realtime-preview-2024-10-01',
    'gpt-4',
    'chatgpt-4o-latest',
    'gpt-4-turbo-preview',
    'gpt-4-0125-preview',
    'gpt-4-turbo-2024-04-09',
    'gpt-3.5-turbo-1106',
    'gpt-3.5-turbo-instruct',
    'gpt-4o-2024-11-20',
    'gpt-3.5-turbo-instruct-0914',
    'gpt-3.5-turbo-0125',
    'gpt-4o-realtime-preview-2024-12-17',
    'gpt-3.5-turbo',
    'gpt-4o-realtime-preview',
    'gpt-3.5-turbo-16k',
    'gpt-4-1106-preview',
    'gpt-4-0613',
    'gpt-4o-mini-2024-07-18',
    'gpt-4o-2024-05-13',
    'gpt-4o-mini',
    'gpt-4o-2024-08-06',
    'gpt-4o',
  ];
  return modelsWithSystemPrompt.includes(model);
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–∞—î, —á–∏ –º–æ–¥–µ–ª—å –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ o1-—Å–µ—Ä—ñ—ó.
 * –î–ª—è –º–æ–¥–µ–ª–µ–π –æ1-—Å–µ—Ä—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è: max_completion_tokens –∑–∞–º—ñ—Å—Ç—å max_tokens,
 * –∞ —Ç–∞–∫–æ–∂ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è temperature (1).
 */
function isO1Series(model: string): boolean {
  return model.startsWith('o1-') || model === 'o1';
}

/**
 * –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ OpenAI API –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –º–æ–¥–µ–ª—ñ.
 */
function formatMessages(
  model: string,
  systemPrompt?: string,
  userPrompt?: string,
): { role: string; content: string }[] {
  if (modelSupportsSystemPrompt(model)) {
    return [
      { role: 'system', content: systemPrompt || '...' },
      { role: 'user', content: userPrompt || '...' },
    ];
  } else {
    const combined = `${systemPrompt || ''}\n${userPrompt || ''}`.trim();
    return [{ role: 'user', content: combined }];
  }
}

// ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
export const startBot = async (chatId: string) => {
  if (activeBots.has(chatId)) {
    console.log(`‚ö†Ô∏è –ë–æ—Ç –¥–ª—è —á–∞—Ç—É ${chatId} –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π.`);
    return;
  }
  const chat = await prisma.discordChat.findUnique({
    where: { id: chatId },
    include: {
      discordAccount: {
        include: { user: true },
      },
    },
  });

  if (!chat || chat.status !== ChatStatus.active) {
    console.log(
      `‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –¥–ª—è —á–∞—Ç—É ${chatId}: —Å—Ç–∞—Ç—É—Å –Ω–µ "active".`,
    );
    return;
  }
  console.log('chat', chat);
  console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –¥–ª—è —á–∞—Ç—É ${chatId}...`);
  const client = new Client();
  const openaiApiKey = chat.discordAccount.user.openai_api_key;

  console.log('openaiApiKey', openaiApiKey);

  const openai = new OpenAI({ apiKey: openaiApiKey });

  client.on('ready', async () => {
    console.log(`‚úÖ –ë–æ—Ç —É–≤—ñ–π—à–æ–≤ —è–∫ ${client.user?.tag} –¥–ª—è —á–∞—Ç—É ${chatId}`);

    const sendMessage = async () => {
      const updatedChat = await prisma.discordChat.findUnique({
        where: { id: chatId },
      });

      if (!updatedChat || updatedChat.status === ChatStatus.stopped) {
        console.log(
          `üõë –ë–æ—Ç –¥–ª—è —á–∞—Ç—É ${chatId} –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å "stopped".`,
        );
        await stopBot(chatId);
        return;
      }

      const channel = client.channels.cache.get(
        updatedChat.discordChatId,
      ) as TextChannel;

      if (!channel) {
        console.error(
          `‚ùå –ö–∞–Ω–∞–ª ${updatedChat.discordChatId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ü–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª! –ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è.`,
        );
        await stopBot(chatId);
        return;
      }

      const model = updatedChat.gpt_model || 'gpt-4o-mini';
      const messages = formatMessages(
        model,
        updatedChat.prompt_system,
        updatedChat.prompt_user,
      );

      // –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–¥–µ–ª—ñ
      const requestPayload: any = {
        model: model,
        messages: messages as any,
      };

      // –Ø–∫—â–æ –º–æ–¥–µ–ª—å –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ o1-—Å–µ—Ä—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ max_completion_tokens —Ç–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ temperature=1.
      if (isO1Series(model)) {
        requestPayload.max_completion_tokens = updatedChat.max_tokens || 100;
        requestPayload.temperature = 1;
      } else {
        requestPayload.max_tokens = updatedChat.max_tokens || 100;
        requestPayload.temperature = updatedChat.temperature || 0.7;
      }

      try {
        const response = await openai.chat.completions.create(requestPayload);
        console.log('response', response);
        const aiMessage = response.choices[0].message.content;
        await channel.send(aiMessage);
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API:', error);
      }

      const interval =
        updatedChat.min_interval === updatedChat.max_interval
          ? updatedChat.min_interval * 1000
          : (Math.floor(
              Math.random() *
                (updatedChat.max_interval - updatedChat.min_interval + 1),
            ) +
              updatedChat.min_interval) *
            1000;

      console.log(`‚è≥ –ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${interval / 1000} —Å–µ–∫—É–Ω–¥.`);

      const intervalId = setTimeout(sendMessage, interval);
      activeBots.set(chatId, { client, chatId, intervalId });
    };

    sendMessage();
  });

  client.login(chat.discordAccount.accountToken);
};

// ‚úÖ –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
export const stopBot = async (chatId: string) => {
  const botInstance = activeBots.get(chatId);
  if (!botInstance) return;

  clearInterval(botInstance.intervalId);
  botInstance.client.destroy();
  activeBots.delete(chatId);
  console.log(`üõë –ë–æ—Ç –¥–ª—è —á–∞—Ç—É ${chatId} –∑—É–ø–∏–Ω–µ–Ω–æ.`);
};

// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É (–∑–∞–ø—É—Å–∫/–∑—É–ø–∏–Ω–∫–∞)
export const updateBotStatus = async (chatId: string) => {
  const chat = await prisma.discordChat.findUnique({
    where: { id: chatId },
  });

  if (!chat) return;

  if (chat.status === ChatStatus.active) {
    startBot(chatId);
  } else {
    stopBot(chatId);
  }
};

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –±–æ—Ç –ø—Ä–∞—Ü—é—î
export const isBotRunning = (chatId: string): boolean => {
  return activeBots.has(chatId);
};

// ‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ—Ç—ñ–≤ –ø—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É —Å–µ—Ä–≤–µ—Ä–∞
export const restartActiveBots = async () => {
  console.log('üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É...');

  const activeChats = await prisma.discordChat.findMany({
    where: { status: ChatStatus.active },
    include: { discordAccount: true },
  });

  if (!activeChats.length) {
    console.log('‚úÖ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É.');
    return;
  }

  for (const chat of activeChats) {
    console.log(
      `üîë –¢–æ–∫–µ–Ω –¥–ª—è —á–∞—Ç—É ${chat.id}:`,
      chat.discordAccount.accountToken
        ? chat.discordAccount.accountToken.slice(0, 10) + '...'
        : '‚ùå –ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞!',
    );

    if (!chat.discordAccount.accountToken) {
      console.error(`‚ùå –ß–∞—Ç ${chat.id} –Ω–µ –º–∞—î —Ç–æ–∫–µ–Ω–∞!`);
      continue;
    }

    console.log(`üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –¥–ª—è —á–∞—Ç—É ${chat.id}...`);
    await startBot(chat.id);
  }

  console.log('‚úÖ –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –±–æ—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!');
};
